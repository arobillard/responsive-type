import {
  defaultHeadings,
  generateClampedFontSize,
  generateFontSizeByScale,
} from '@/helpers/scales';
import codeBox from './codeBox.module.css';
import Button from '../Button/Button';
import { useEffect, useState } from 'react';

export default function CodeBox({
  usingMediaQueries,
  scalingType,
  lowerScale,
  upperScale,
  mediaQueries,
}) {
  const [hasBeenCopied, setHasBeenCopied] = useState(false);
  const [outputCode, setOutputCode] = useState(``);

  function copyCSSCode() {
    navigator.clipboard.writeText(outputCode);

    setHasBeenCopied(true);

    setTimeout(() => {
      setHasBeenCopied(false);
    }, 2000);
  }

  // function generateClampHeadings() {

  // }

  useEffect(() => {
    let generatedStyles = `/* ---------- Start of typography code generated by responsivetype.io ---------- */`;

    if (usingMediaQueries) {
      // Set mediaQueries headings

      mediaQueries.forEach((mq, i) => {
        // Generate all heading code at media query

        let headingsCode = ``;

        defaultHeadings.forEach((heading) => {
          if (i > 0) {
            headingsCode =
              headingsCode +
              `
  ${heading.tag} {
    font-size: ${generateFontSizeByScale(mq.scale.value, heading.step)};
  }
    `;
          } else {
            headingsCode =
              headingsCode +
              `
${heading.tag} {
  font-size: ${generateFontSizeByScale(mq.scale.value, heading.step)};
}
    `;
          }
        });

        // If not first item, include a media query
        if (i > 0) {
          generatedStyles =
            generatedStyles +
            `
/* ----- ${mq.label.toUpperCase()} | scale: ${mq.scale.value} - ${
              mq.scale.label
            } ----- */

@media only screen and (min-width: ${mq.minWidth}) {
  ${headingsCode}
}
`;
        } else {
          generatedStyles =
            generatedStyles +
            `

/* ----- ${mq.label.toUpperCase()} | scale: ${mq.scale.value} - ${
              mq.scale.label
            } ----- */
${headingsCode}
          `;
        }
      });
    } else {
      // Set clamp headings
      defaultHeadings.forEach((heading) => {
        generatedStyles =
          generatedStyles +
          `
  
${heading.tag} {
  font-size: ${generateClampedFontSize(
    lowerScale,
    upperScale,
    scalingType,
    heading.step
  )};
}
  `;
      });
    }

    generatedStyles =
      generatedStyles +
      `

/* ---------- End of typography code generated by responsivetype.io ---------- */
    `;

    setOutputCode(generatedStyles);
  }, [usingMediaQueries, lowerScale, upperScale, scalingType, mediaQueries]);

  return (
    <section className={codeBox.codeBox}>
      <h2>CSS Code</h2>
      <Button outline onClick={copyCSSCode}>
        <i className={`material-symbols-outlined`} aria-hidden="true">
          {hasBeenCopied ? 'check_circle' : 'content_paste'}
        </i>
        Copy Code
      </Button>
      <pre className={codeBox.pre}>
        <code>{outputCode}</code>
      </pre>
    </section>
  );
}
